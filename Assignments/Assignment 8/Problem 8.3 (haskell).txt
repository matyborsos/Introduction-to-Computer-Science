module Main (main) where

import Test.HUnit

 -- | Convert a non-negative integer number into a String providing a
 -- | binary representation of the number.
  dtob :: Int -> String
  dtob 1 = "1"
  dtob 0 = "0"
  dtob n
     | even n = dtob(n `div` 2) ++ "0" 
     | otherwise = dtob(n `div` 2) ++ "1"

 -- | Convert a String representing a non-negative integer number as a
 -- | binary number into an integer number.
 btod :: String -> Int
 btod "0" = 0
 btod "1" = 1
 btod xs 
     | head xs == '1' = 2 ^ (length xs - 1 ) + btod(tail xs) 
     | otherwise = btod(tail xs)

-- | Below are some test cases...

dtobTests = TestList [ dtob 0 ~?= "0"
		   , dtob 1 ~?= "1"
		   , dtob 2 ~?= "10"
 		   , dtob 127 ~?= "1111111"
 		   , dtob 12345 ~?= "11000000111001"
		   ]

btodTests = TestList [ btod "0" ~?= 0
 		    , btod "1" ~?= 1
 		    , btod "10" ~?= 2
		    , btod "1111111" ~?= 127
		    , btod "11000000111001" ~?= 12345
	         	    ]

main = runTestTT $ TestList [ dtobTests, btodTests ]