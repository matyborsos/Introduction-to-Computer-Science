Problem 12.1 (BNF)

<number>  	::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | <decimal> | "0x" <hexa>  | "0b" <binary> | "0o" <octal>
<decimal>  	::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | <decimal> <decimal> | <decimal> <digit> 
<digit>         ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<binary>     	::= "0" | "1" | <binary> <binary>
<octal>        	::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | <octal> <octal>
<hexa>         	::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" | <hexa> <hexa>

Problem 12.3 (haskell)

a)
module Main (main) where

import Test.HUnit

ed :: String -> String -> Int
ed [] b = length b
ed a [] = length a
ed  (a:a1) (b:b1) 
    | a == b    = ed a1 b1
    | otherwise = 1 + min (min (ed ([b]++(a:a1)) (b:b1))  (ed a1 (b:b1))) (ed ([b]++a1) (b:b1))

b)
edTest = TestList
    [ ed "car" "chair" ~?= 2
    , ed "" "car" ~?= 3
    , ed "hhr" "hh" ~?= 1
    ]

main = runTestTT & TestList(edTest)